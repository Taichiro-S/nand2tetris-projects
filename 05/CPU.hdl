// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 

 * ALU 
 * in x[16], y[16], zx, nx, zy, ny, f, no
 * out out[16], zr, ng

 * PC
 * in in[16], load, inc, reset
 * out out[16]

 * Register
 * in in[16], load
 * out out[16]
 
*/

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // calc isAddress
    Not(in=instruction[15], out=isAddress)

    // Mux 1
    Mux16(a=instruction, b=ALUOut, sel=isAddress, out=MuxOut1);

    // calc loadAR
    Or(a=isAddress, b=instruction[5], out=loadAR)
    // A Register
    Register(in=MuxOut1, load=loadAR, out[0..14]=addressM[0..14], out=AROut);

    // calc loadDR
    And(a=instruction[4], b=instruction[15], out=loadDR)
    // D Register
    Register(in=ALUout, load=loadDR, out=DROut);

    // Mux 2
    Mux16(a=AROut, b=inM, sel=instruction[12], out=MuxOut2);

    ALU(x=DROut, y=MuxOut2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);
    
    Or(a=instruction[2], b=instruction[1], out=orOut1);
    Or(a=orOut1, b=instruction[0], out=orOut2);
    Not(in=orOut2, out=notOut);
    PC(in=AROut, load=orOut2, inc=notOut, reset=reset, out[0..14]=pc[0..14]);
    And(a=instruction[3], b=instruction[15], out=writeM);
}